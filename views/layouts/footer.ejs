 


<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.16.0/umd/popper.min.js"></script>
<script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/medium-zoom/dist/medium-zoom.min.js"></script>
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
 


</script>


 <script>
  function countdown() {
    let seconds = 59;
    function tick() {
      let counter = document.getElementById("counter");
      seconds--;
      counter.innerHTML =
        "0:" + (seconds < 10 ? "0" : "") + String(seconds);
      if (seconds > 0) {
        setTimeout(tick, 1000);
      } else {
          // Change the button style here 
          const resendBtn = document.getElementById("verifiBtn");
        resendBtn.innerHTML = `
          <button type="submit" class="btn btn-primary btn-block border-dark curved" onclick="location.reload()" style="width: 40%;">Resend OTP</button>
        `;
        document.getElementById("counter").innerHTML = "";
      }
    }
    tick();
  }
  countdown();
 </script>  
 


<script>
  $(document).ready(function() {
    $('.dropdown-toggle').dropdown();
  });
</script>
<script>
function blockUser(userId) {
  fetch('/admin/users/block/' + userId, { method: 'POST' })
    .then(response => response.json())
    .then(data => {
      if (data.message === 'User blocked successfully') {
        // Update UI to reflect blocked state
      } else {
        // Handle error response
      }
    })
    .catch(error => console.error(error));
}
 
function unblockUser(userId) {
  fetch('/admin/users/unblock/' + userId, { method: 'POST' })
    .then(response => response.json())
    .then(data => {
      if (data.message === 'User unblocked successfully') {   
      } else {
      }
    })
    .catch(error => console.error(error));
}
 
</script>

<script>
    async function fetchAndRenderCategories() {
      try {
        const response = await fetch('/categories'); 
        const categories = await response.json();
        <ul id="categoryList"></ul>
        const categoryList = document.getElementById('categoryList');
        categoryList.innerHTML = ''; 
    
        categories.forEach(category => {
          const listItem = document.createElement('li');
          listItem.innerHTML = `
            <span>${category.name}</span>
            <button onclick="unlistCategory('${category._id}')">Unlist</button>
          `;
          categoryList.appendChild(listItem);
        });
      } catch (error) {
        console.error('Error fetching categories:', error.message);
      }
    }
    async function unlistCategory(categoryId) {
      try {
        const response = await fetch(`/admin/categories/${categoryId}/unlist`, {
          method: 'PUT',
          headers: {
            'Content-Type': 'application/json'
          }
        });

        if (response.ok) {
          alert('Category unlisted successfully!');
          fetchAndRenderCategories(); 
        } else {
          throw new Error('Failed to unlist the category.');
        }
      } catch (error) {
        console.error('Error:', error.message);
        alert(error.message);
      }
    }
    window.onload = fetchAndRenderCategories;
  </script>


<script>
  
  document.getElementById('file-upload').addEventListener('change', function () {
      const files = this.files;
      const imagePreviewContainer = document.getElementById('image-preview-container');
      imagePreviewContainer.innerHTML = ''; 

      for (let i = 0; i < files.length; i++) {
          const file = files[i];
          if (file) {
              const reader = new FileReader();
              reader.onload = function (e) {
                  const imgElement = document.createElement('img');
                  imgElement.setAttribute('src', e.target.result);
                  imgElement.setAttribute('class', 'preview-image');
                  imgElement.setAttribute('alt', 'Image Preview');
                  imagePreviewContainer.appendChild(imgElement);
              }
              reader.readAsDataURL(file);
          }
      }
  });
</script>

<script>

  function previewImages(event) {
    
    const files = event.target.files;
    const newlyAddedImagesContainer = document.querySelector('.newly-added-images');
    newlyAddedImagesContainer.innerHTML = '';

    for (let i = 0; i < files.length; i++) {
      const reader = new FileReader();
      const imageContainer = document.createElement('div');
      const imageElement = document.createElement('img');
      const deleteLabel = document.createElement('label');
      const deleteCheckbox = document.createElement('input');

      reader.onload = function (e) {
        imageElement.src = e.target.result;
      };

      reader.readAsDataURL(files[i]);

      deleteLabel.textContent = 'Delete Image';
      deleteCheckbox.type = 'checkbox';
      deleteCheckbox.name = 'deleteImages'; // You might want to assign a unique identifier here for the new images
      deleteCheckbox.value = i; // Adjust the value as per your requirements

      imageContainer.classList.add('existing-image');
      imageContainer.appendChild(imageElement);
      imageContainer.appendChild(deleteLabel);
      imageContainer.appendChild(deleteCheckbox);

      newlyAddedImagesContainer.appendChild(imageContainer);
    }
  }
</script>
<script>
 document.getElementById('category-file-upload').addEventListener('change', function () {
    const file = this.files[0];
    const categoryImagePreviewContainer = document.getElementById('category-image-preview-container');
    categoryImagePreviewContainer.innerHTML = '';   

    if (file) {
        const reader = new FileReader();
        reader.onload = function (e) {
            const imgElement = document.createElement('img');
            imgElement.setAttribute('src', e.target.result);
            imgElement.setAttribute('class', 'preview-category-image');
            imgElement.setAttribute('alt', 'Category Image Preview');
            categoryImagePreviewContainer.appendChild(imgElement);
        };
        reader.readAsDataURL(file);
    }
});

</script>


<script>
  // Function to handle file input change event
  document.getElementById('imageUpload').addEventListener('change', function() {
      const file = this.files[0];
      const reader = new FileReader();

      reader.onload = function(e) {
          const existingImage = document.querySelector('.existing-image');
          if (existingImage) {
              existingImage.src = e.target.result;
          } else {
              const newImage = document.createElement('img');
              newImage.src = e.target.result;
              newImage.alt = 'New Image';
              newImage.className = 'existing-image';
              newImage.style = 'width: 100px; height: 100px; position: relative; bottom: 10px;';
              this.parentNode.insertBefore(newImage, this.nextSibling);
          }
      };

      reader.readAsDataURL(file);
  });
</script>
<script>
  document.querySelectorAll('.remove-item-btn').forEach(button => {
    button.addEventListener('click', async (event) => {
     
      const productId = event.target.dataset.productId;
console.log(productId);
      try {
        const response = await fetch('http://localhost:4000/remove-from-cart', {
          method: 'POST',
          headers: {

             
            'Content-Type': 'application/json'
          },
          withCredentials: true,
          body: JSON.stringify({ productId: productId })
        });

        if (response.ok) { 
          event.target.parentElement.parentElement.remove();  
        } else {
          const errorData = await response.json();
          console.error('Error:', errorData.message); 
        }
      } catch (error) {
        console.error('Error:', error); 
      }
    });
  });
</script>
<script>
document.addEventListener('DOMContentLoaded', function() {
  const menuItems = document.querySelectorAll('.nk-menu-item');
  const currentPath = window.location.pathname;

  menuItems.forEach(item => {
    const menuItemLink = item.querySelector('.nk-menu-link');
    const menuItemHref = menuItemLink.getAttribute('href');

    if (currentPath.includes(menuItemHref)) {
      item.classList.add('active');
    }

    menuItemLink.addEventListener('click', function() {
      // Remove 'active' class from all items
      menuItems.forEach(item => {
        item.classList.remove('active');
      });

      // Add 'active' class to the parent item when a link is clicked
      item.classList.add('active');
    });
  });
});
</script>

<script>
  $(document).ready(function() {
    $('.add-to-cart-btn').click(function(event) {
      event.preventDefault(); // Prevent default link behavior
  
      const url = $(this).attr('href');
  
      // Perform the AJAX request to add the product to the cart
      $.ajax({
        type: 'GET',
        url: url,
        success: function(response) {
          // If the request was successful, show the modal
          $('#cartModal').modal('show');
        },
        error: function(error) {
          // Handle errors if needed
          console.error('Error:', error);
        }
      });
    });
  });
  </script>

<script>
  (function () {
    "use strict";
    var forms = document.querySelectorAll(".needs-validation");
    Array.prototype.slice.call(forms).forEach(function (form) {
      form.addEventListener(
        "submit",
        function (event) {
          if (!form.checkValidity()) {
            event.preventDefault();
            event.stopPropagation();
          }

          form.classList.add("was-validated");
        },
        false
      );
    });
  })();
</script>
</body>
</html>