 


<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.16.0/umd/popper.min.js"></script>
<script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/medium-zoom/dist/medium-zoom.min.js"></script>
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script src="https://checkout.razorpay.com/v1/checkout.js"></script>
<!-- prettier-ignore -->
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
 <script>
  const thisWeekOrders = totalOrdersData[totalOrdersData.length - 1];
const lastWeekOrders = totalOrdersData[totalOrdersData.length - 2];

// Calculate percentage change
const percentageChange = ((thisWeekOrders - lastWeekOrders) / lastWeekOrders) * 100;

// Update the HTML elements
document.getElementById('thisWeekTotalOrders').innerText = `$${thisWeekOrders.toFixed(2)}`;
document.getElementById('ordersPercentageChange').innerText = `${percentageChange.toFixed(2)}%`;

// Change color based on positive/negative percentage
if (percentageChange > 0) {
  document.getElementById('ordersPercentageChange').classList.add('text-danger');
} else {
  document.getElementById('ordersPercentageChange').classList.add('text-success');
}
 </script>
<script>
  // Retrieve monthly sales data and create a line chart
  var ctxLabel = document.getElementById("labelChart").getContext('2d');
  let totalSales = JSON.parse(document.getElementById('totalSales').value);

  var totalChart = new Chart(ctxLabel, {
    type: 'bar',
    data: {
      labels: Array.from({ length: totalSales.length }, (_, i) => ` ${i + 1}`),
      datasets: [{
        label: 'Total Sales',
        data: totalSales,
        borderColor: 'blue',
        borderWidth: 1,
        fill: false
      }]
    },
    options: {
      scales: {
        y: {
          beginAtZero: true
        }
      }
    }
  });
   
  var ctx= document.getElementById("averageOrderChart").getContext('2d');
  let averageOrders= JSON.parse(document.getElementById('totalAverageOrders').value);

  var myChart  =  new Chart(ctx, {
    type: 'bar',
  data: {
    labels: Array.from({ length: averageOrders.length }, (_, i) => `Order ${i + 1}`),
    datasets: [{
      label: 'Average Order',
      data: averageOrders,
      backgroundColor: 'blue',
      borderColor: 'blue',
      borderWidth: 1
    }]
  },

    options: {
      scales: {
        y: {
          beginAtZero: true
        }
      }
    }
  });
   

  var ctxOrder = document.getElementById("orderChart").getContext('2d');
  let totalOrders = JSON.parse(document.getElementById('totalOrders').value);

  var orderChart = new Chart(ctxOrder, {
    type: 'bar',
    data: {
      labels: Array.from({ length: totalOrders.length }, (_, i) => ` ${i + 1}`),
      datasets: [{
        label: 'Total Order',
        data: totalOrders,
        borderColor: 'blue',
        borderWidth: 1,
        fill: false
      }]
    },
    options: {
      scales: {
        y: {
          beginAtZero: true
        }
      }
    }
  });
   


  var ctxCustomer = document.getElementById("customerChart").getContext('2d');
  let totalCustomers = JSON.parse(document.getElementById('totalCustomers').value);

  var customerChart = new Chart(ctxCustomer, {
    type: 'bar',
    data: {
      labels: Array.from({ length: totalCustomers.length }, (_, i) => ` ${i  }`),
      datasets: [{
        label: 'Total Customer',
        data: totalCustomers,
        borderColor: 'blue',
        borderWidth: 1,
        fill: false
      }]
    },
    options: {
      scales: {
        y: {
          beginAtZero: true
        }
      }
    }
  });
</script>
 
 <script>
    function countdown() {
    let seconds = 59;
    function tick() {
      let counter = document.getElementById("counter");
      seconds--;
      counter.innerHTML =
        "0:" + (seconds < 10 ? "0" : "") + String(seconds);
      if (seconds > 0) {
        setTimeout(tick, 1000);
      } else { 
          const resendBtn = document.getElementById("verifiBtn");
        resendBtn.innerHTML = `
          <button type="submit" class="btn btn-primary btn-block border-dark curved" onclick="location.reload()" style="width: 40%;">Resend OTP</button>
        `;
        document.getElementById("counter").innerHTML = "";
      }
    }
    tick();
  }
  countdown();
 </script>  
  
  
<!-- <script>
  $(document).ready(function () {
  $('#placeOrderBtn').prop('disabled', true); 

  $('input[name="paymentMethod"]').change(function () {
    const selectedPayment = $('input[name="paymentMethod"]:checked').val();

    if (selectedPayment === 'Cash on delivery') {
      $('#placeOrderBtn').prop('disabled', false);
    } else {
      $('#placeOrderBtn').prop('disabled', true);
    }
  });

  $('#orderForm').submit(function (event) {
    event.preventDefault();
    if (!validateCheckoutForm()) {
      return;
    }

    const selectedPayment = $('input[name="payment"]:checked').val();

    if (selectedPayment === 'Cash on delivery') {
      $('#success_tic').modal('show');
    } else {
      initiateRazorpayPayment(); // Function to initiate Razorpay payment
    }
  });
})
 </script> -->
 <!-- <script>
 
  const payBtn = document.getElementById('payBtn');
  payBtn.addEventListener('click', async () => {
    console.log("hooi");
    
  })

</script> -->

 <script>
  $(document).ready(function () {
  $('#orderForm').submit(async function (event) {
    event.preventDefault();
    console.log("hello");
    if (!validateCheckoutForm()) {
      return;
    }

    const selectedPaymentMethod = $('input[name="paymentMethod"]:checked').val();

    if (selectedPaymentMethod === "Razorpay") {
      const response = await fetch('/payment');
      const order = await response.json();
      const options = {
        key: "rzp_test_zjUM3EiMBvJ2Q1",
        amount: order.amount,
        name: 'Your Company Name',
        description: 'Test Payment',
        order_id: order.id,
        handler: async function (response) {
          // 1. Send a separate AJAX request to confirm payment
          await $.ajax({
            type: 'POST',
            url: '/saveOrder', // Assuming this endpoint verifies payment
            data: {
              razorpay_payment_id: response.razorpay_payment_id,
              razorpay_order_id: response.razorpay_order_id,
              razorpay_signature: response.razorpay_signature,
            },
            success: function (paymentResponse) {
              // 2. Display the success modal if payment is confirmed
              $('#success_tic').modal('show');
            },
            error: function (xhr, status, error) {
              // Handle payment confirmation errors
              console.error('Error confirming payment:', error);
              // ...display error message to user
            },
          });
        },
      };

      const rzp1 = new Razorpay(options);
      rzp1.open();

    
    } else {
        // Handle other payment methods (if needed)
        console.log('Selected payment method is not Razorpay');
        // You can place the logic for handling other payment methods here
        // For example, triggering the form submission for Cash on Delivery
        $('#orderForm').unbind('submit').submit();
          $.ajax({
        type: 'POST',
        url: '/saveOrder',
        data: $(this).serialize(),
        success: function (response) {
          $('#success_tic').modal('show');
        },
        error: function (xhr, status, error) {
          console.error('Error placing order:', error);
          if (xhr.status === 400) {
            console.log('Toast will be shown.');  
            $('#toast').toast('show');
          }
        },
      });
         // Uncomment this line to submit the form for other payment methods
      }
    });
        function displayError(fieldId, message) { 
          const field = $('#' + fieldId);
          const errorDiv = $('<div class="error-message"></div>').text(message).css('color', 'red');
          const existingError = field.parent().find('.error-message');

          if (existingError.length) {
            existingError.remove();
          }

          field.parent().append(errorDiv);
        }

        function validateCheckoutForm() {
          const requiredFields = [
            'first-nem',
            'last-nam',
            'addres',
            'country',
            'city',
            'pincode',
            'email',
            'mob',
          ]; 
          let isValid = true; 
          requiredFields.forEach(function (fieldId) {
            const fieldValue = $('#' + fieldId).val().trim(); 
            if (fieldValue === '') {
              displayError(fieldId, 'Please enter the required information.');
              isValid = false;
            } else {
              $('#' + fieldId).parent().find('.error-message').remove();
            }
          }); 
          const email = $('#email').val().trim();
          const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
          if (!emailRegex.test(email)) {
            displayError('email', 'Please enter a valid email address.');
            isValid = false;
          } 
          const mobile = $('#mob').val().trim();
          const mobileRegex = /^\d{10}$/;
          if (!mobileRegex.test(mobile)) {
            displayError('mob', 'Please enter a valid 10-digit mobile number.');
            isValid = false;
          } 
          return isValid;
        }
        function validatePaymentMethod() {
      const paymentMethod = $('input[name="paymentMethod"]:checked').val();
      if (!paymentMethod) {
        displayError('payment-error', 'Please choose a payment method.');
        return false;
      } else {
        $('#payment-error').remove();
        return true;
      }
    }
  });
</script>

<script>
  $(document).ready(function() {
    $('.dropdown-toggle').dropdown();
  });
</script>

<script>
function blockUser(userId) {
  fetch('/admin/users/block/' + userId, { method: 'POST' })
    .then(response => response.json())
    .then(data => {
      if (data.message === 'User blocked successfully') { 
      } else { 
      }
    })
    .catch(error => console.error(error));
} 
function unblockUser(userId) {
  fetch('/admin/users/unblock/' + userId, { method: 'POST' })
    .then(response => response.json())
    .then(data => {
      if (data.message === 'User unblocked successfully') {   
      } else {
      }
    })
    .catch(error => console.error(error));
} 
</script>

<script>
    async function fetchAndRenderCategories() {
      try {
        const response = await fetch('/categories'); 
        const categories = await response.json();
        <ul id="categoryList"></ul>
        const categoryList = document.getElementById('categoryList');
        categoryList.innerHTML = '';  
        categories.forEach(category => {
          const listItem = document.createElement('li');
          listItem.innerHTML = `
            <span>${category.name}</span>
            <button onclick="unlistCategory('${category._id}')">Unlist</button>
          `;
          categoryList.appendChild(listItem);
        });
      } catch (error) {
        console.error('Error fetching categories:', error.message);
      }
    }
    async function unlistCategory(categoryId) {
      try {
        const response = await fetch(`/admin/categories/${categoryId}/unlist`, {
          method: 'PUT',
          headers: {
            'Content-Type': 'application/json'
          }
        }); 
        if (response.ok) {
          alert('Category unlisted successfully!');
          fetchAndRenderCategories(); 
        } else {
          throw new Error('Failed to unlist the category.');
        }
      } catch (error) {
        console.error('Error:', error.message);
        alert(error.message);
      }
    }
    window.onload = fetchAndRenderCategories;
  </script>
<script>
  document.getElementById('file-upload').addEventListener('change', function () {
      const files = this.files;
      const imagePreviewContainer = document.getElementById('image-preview-container');
      imagePreviewContainer.innerHTML = ''; // Clear previous images
  
      for (let i = 0; i < files.length; i++) {
          const file = files[i];
          if (file) {
              const reader = new FileReader();
              reader.onload = function (e) {
                  const imgElement = document.createElement('img');
                  imgElement.setAttribute('src', e.target.result);
                  imgElement.setAttribute('class', 'preview-image');
                  imgElement.setAttribute('alt', 'Image Preview');
                  imagePreviewContainer.appendChild(imgElement);
              }
              reader.readAsDataURL(file);
          }
      }
  });
  </script>

<script> 
  function previewImages(event) {
    const files = event.target.files;
    const newlyAddedImagesContainer = document.querySelector('.newly-added-images');
    newlyAddedImagesContainer.innerHTML = ''; 
    for (let i = 0; i < files.length; i++) {
      const reader = new FileReader();
      const imageContainer = document.createElement('div');
      const imageElement = document.createElement('img');
      const deleteLabel = document.createElement('label');
      const deleteCheckbox = document.createElement('input'); 
      reader.onload = function (e) {
        imageElement.src = e.target.result;
      }; 
      reader.readAsDataURL(files[i]); 
      deleteLabel.textContent = 'Delete Image';
      deleteCheckbox.type = 'checkbox';
      deleteCheckbox.name = 'deleteImages'; 
      deleteCheckbox.value = i;  
      imageContainer.classList.add('existing-image');
      imageContainer.appendChild(imageElement);
      imageContainer.appendChild(deleteLabel);
      imageContainer.appendChild(deleteCheckbox); 
      newlyAddedImagesContainer.appendChild(imageContainer);
    }
  }
</script>
<script>
  document.getElementById('category-file-upload').addEventListener('change', function () {
      const file = this.files[0];
      const categoryImagePreviewContainer = document.getElementById('category-image-preview-container');
      categoryImagePreviewContainer.innerHTML = ''; // Clear previous image
  
      if (file) {
          const reader = new FileReader();
          reader.onload = function (e) {
              const imgElement = document.createElement('img');
              imgElement.setAttribute('src', e.target.result);
              imgElement.setAttribute('class', 'preview-category-image');
              imgElement.setAttribute('alt', 'Category Image Preview');
              categoryImagePreviewContainer.appendChild(imgElement);
          };
          reader.readAsDataURL(file);
      }
  });
  </script>
  
<script> 
  document.getElementById('imageUpload').addEventListener('change', function() {
      const file = this.files[0];
      const reader = new FileReader(); 
      reader.onload = function(e) {
          const existingImage = document.querySelector('.existing-image');
          if (existingImage) {
              existingImage.src = e.target.result;
          } else {
              const newImage = document.createElement('img');
              newImage.src = e.target.result;
              newImage.alt = 'New Image';
              newImage.className = 'existing-image';
              newImage.style = 'width: 100px; height: 100px; position: relative; bottom: 10px;';
              this.parentNode.insertBefore(newImage, this.nextSibling);
          }
      }; 
      reader.readAsDataURL(file);
  });
</script>

<script>
  window.onload = function () { 
      if (window.performance.navigation.type === 1) { 
          document.querySelector('input[name="name"]').value = ''; 
          document.querySelector('.invalid-feedback').style.display = 'none';
      }
  };
</script>

<script>
  document.querySelectorAll('.remove-item-btn').forEach(button => {
    button.addEventListener('click', async (event) => { 
      const productId = event.target.dataset.productId;
          console.log(productId);
      try {
        const response = await fetch('http://localhost:4000/remove-from-cart', {
          method: 'POST',
          headers: {   
            'Content-Type': 'application/json'
          },
          withCredentials: true,
          body: JSON.stringify({ productId: productId })
        }); 
        if (response.ok) { 
          event.target.parentElement.parentElement.remove();  
        } else {
          const errorData = await response.json();
          console.error('Error:', errorData.message); 
        }
      } catch (error) {
        console.error('Error:', error); 
      }
    });
  });
</script>

<script>
  document.querySelectorAll('.cancel-item-btn').forEach(button => {
    button.addEventListener('click', async (event) => { 
      const _id = event.target.dataset._id;
         console.log(_id);
      try {
        const response = await fetch('http://localhost:4000/cancel-order', {
          method: 'POST',
          headers: { 
            'Content-Type': 'application/json'
          },
          withCredentials: true,
          body: JSON.stringify({ _id: _id})
        }); 
        if (response.ok) { 
          event.target.parentElement.parentElement.cancel();  
        } else {
          const errorData = await response.json();
          console.error('Error:', errorData.message); 
        }
      } catch (error) {
        console.error('Error:', error); 
      }
    });
  });
</script>

<script>
document.addEventListener('DOMContentLoaded', function() {
  const menuItems = document.querySelectorAll('.nk-menu-item');
  const currentPath = window.location.pathname; 
  menuItems.forEach(item => {
    const menuItemLink = item.querySelector('.nk-menu-link');
    const menuItemHref = menuItemLink.getAttribute('href'); 
    if (currentPath.includes(menuItemHref)) {
      item.classList.add('active');
    } 
    menuItemLink.addEventListener('click', function() { 
      menuItems.forEach(item => {
        item.classList.remove('active');
      }); 
      item.classList.add('active');
    });
  });
});
</script>

<script>
  $(document).ready(function() {
    $('.add-to-cart-btn').click(function(event) {
      event.preventDefault();  
      const url = $(this).attr('href'); 
      $.ajax({
        type: 'GET',
        url: url,
        success: function(response) { 
          $('#cartModal').modal('show');
        },
        error: function(error) { 
          console.error('Error:', error);
        }
      });
    });
  });
  </script>

<script>
  $(document).ready(function() { 
    $('.addToCartBtn').on('click', function(event) { 
        
        var productId = $(this).data('product-id'); 
        $('#cartModal').modal('show');
    });
});
</script>

<script>
  (function () {
    "use strict";
    var forms = document.querySelectorAll(".needs-validation");
    Array.prototype.slice.call(forms).forEach(function (form) {
      form.addEventListener(
        "submit",
        function (event) {
          if (!form.checkValidity()) {
            event.preventDefault();
            event.stopPropagation();
          } 
          form.classList.add("was-validated");
        },
        false
      );
    });
  })();
</script>
 
<script>
function previewFile() {
  const preview = document.getElementById('preview-image');
  const fileInput = document.getElementById('file-input');
  const file = fileInput.files[0];
  const reader = new FileReader(); 
  reader.onloadend = function() {
    preview.src = reader.result; 
    localStorage.setItem('savedImageData', reader.result);
  } 
  if (file) {
    reader.readAsDataURL(file);
  } else {
    preview.src = "#";  
  }
} 
window.onload = function() {
  const savedImageData = localStorage.getItem('savedImageData');
  const preview = document.getElementById('preview-image'); 
  if (savedImageData) {
    preview.src = savedImageData;
  }
}
</script>
 
<script>
  function downloadInvoice(orderDetails) {
    fetch('http://localhost:4000/download-invoice', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({ orderDetails })
    })
    .then(response => { 
    })
    .catch(error => { 
    });
  }
</script>

<script>
 document.addEventListener("DOMContentLoaded", function () {
  async function openConfirmationModal(orderId) {
    const modal = document.getElementById('confirmationModal');
    const actionText = modal.querySelector('#actionText');
    const confirmActionBtn = modal.querySelector('#confirmActionBtn'); 
    try { 
      const response = await fetch(`/api/orders/${orderId}`);  
      const order = await response.json(); 
      if (!order) {
        console.error("Order not found");
        return;
      } 
      actionText.textContent = `cancel order ${order._id}`;   
      const bootstrapModal = new bootstrap.Modal(modal);
      bootstrapModal.show(); 
      confirmActionBtn.onclick = async function () {
        try {
          const cancelOrderForm = document.getElementById('cancelOrderForm');
          const formData = new FormData(cancelOrderForm); 
          const cancelResponse = await fetch(`/users/orderInfo/cancel-order/${orderId}`, {
            method: 'POST',
            body: formData,
          }); 
          if (cancelResponse.ok) {
            console.log("Order cancelled");
            bootstrapModal.hide(); 
          } else {
            console.error("Failed to cancel order"); 
          }
        } catch (error) {
          console.error(error); 
        }
      };
    } catch (error) {
      console.error(error); 
    }
  } 
  const orderId = 'someOrderId';  
  openConfirmationModal(orderId);
}); 
</script>


 
</body>
</html>