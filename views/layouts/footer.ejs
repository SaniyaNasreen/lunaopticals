 


<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.16.0/umd/popper.min.js"></script>
<script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js"></script>



</script>


 <script>
  function countdown() {
    let seconds = 59;
    function tick() {
      let counter = document.getElementById("counter");
      seconds--;
      counter.innerHTML =
        "0:" + (seconds < 10 ? "0" : "") + String(seconds);
      if (seconds > 0) {
        setTimeout(tick, 1000);
      } else {
          // Change the button style here 
          const resendBtn = document.getElementById("verifiBtn");
        resendBtn.innerHTML = `
          <button type="submit" class="btn btn-primary btn-block border-dark curved" onclick="location.reload()" style="width: 40%;">Resend OTP</button>
        `;
        document.getElementById("counter").innerHTML = "";
      }
    }
    tick();
  }
  countdown();
 </script>  
 


<script>
  $(document).ready(function() {
    $('.dropdown-toggle').dropdown();
  });
</script>
<script>
function blockUser(userId) {
  fetch('/admin/users/block/' + userId, { method: 'POST' })
    .then(response => response.json())
    .then(data => {
      if (data.message === 'User blocked successfully') {
        // Update UI to reflect blocked state
      } else {
        // Handle error response
      }
    })
    .catch(error => console.error(error));
}
 
function unblockUser(userId) {
  fetch('/admin/users/unblock/' + userId, { method: 'POST' })
    .then(response => response.json())
    .then(data => {
      if (data.message === 'User unblocked successfully') {   
      } else {
      }
    })
    .catch(error => console.error(error));
}
 
</script>

<script>
    async function fetchAndRenderCategories() {
      try {
        const response = await fetch('/categories'); 
        const categories = await response.json();
        <ul id="categoryList"></ul>
        const categoryList = document.getElementById('categoryList');
        categoryList.innerHTML = ''; 
    
        categories.forEach(category => {
          const listItem = document.createElement('li');
          listItem.innerHTML = `
            <span>${category.name}</span>
            <button onclick="unlistCategory('${category._id}')">Unlist</button>
          `;
          categoryList.appendChild(listItem);
        });
      } catch (error) {
        console.error('Error fetching categories:', error.message);
      }
    }
    async function unlistCategory(categoryId) {
      try {
        const response = await fetch(`/admin/categories/${categoryId}/unlist`, {
          method: 'PUT',
          headers: {
            'Content-Type': 'application/json'
          }
        });

        if (response.ok) {
          alert('Category unlisted successfully!');
          fetchAndRenderCategories(); 
        } else {
          throw new Error('Failed to unlist the category.');
        }
      } catch (error) {
        console.error('Error:', error.message);
        alert(error.message);
      }
    }
    window.onload = fetchAndRenderCategories;
  </script>


<script>
  
  document.getElementById('file-upload').addEventListener('change', function () {
      const files = this.files;
      const imagePreviewContainer = document.getElementById('image-preview-container');
      imagePreviewContainer.innerHTML = ''; 

      for (let i = 0; i < files.length; i++) {
          const file = files[i];
          if (file) {
              const reader = new FileReader();
              reader.onload = function (e) {
                  const imgElement = document.createElement('img');
                  imgElement.setAttribute('src', e.target.result);
                  imgElement.setAttribute('class', 'preview-image');
                  imgElement.setAttribute('alt', 'Image Preview');
                  imagePreviewContainer.appendChild(imgElement);
              }
              reader.readAsDataURL(file);
          }
      }
  });
</script>

<script>
 document.getElementById('category-file-upload').addEventListener('change', function () {
    const file = this.files[0];
    const categoryImagePreviewContainer = document.getElementById('category-image-preview-container');
    categoryImagePreviewContainer.innerHTML = '';   

    if (file) {
        const reader = new FileReader();
        reader.onload = function (e) {
            const imgElement = document.createElement('img');
            imgElement.setAttribute('src', e.target.result);
            imgElement.setAttribute('class', 'preview-category-image');
            imgElement.setAttribute('alt', 'Category Image Preview');
            categoryImagePreviewContainer.appendChild(imgElement);
        };
        reader.readAsDataURL(file);
    }
});

</script>


<script>
  document.querySelectorAll('.remove-item-btn').forEach(button => {
    button.addEventListener('click', async (event) => {
     
      const productId = event.target.dataset.productId;
console.log(productId);
      try {
        const response = await fetch('http://localhost:4000/remove-from-cart', {
          method: 'POST',
          headers: {

             
            'Content-Type': 'application/json'
          },
          withCredentials: true,
          body: JSON.stringify({ productId: productId })
        });

        if (response.ok) { 
          event.target.parentElement.parentElement.remove();  
        } else {
          const errorData = await response.json();
          console.error('Error:', errorData.message); 
        }
      } catch (error) {
        console.error('Error:', error); 
      }
    });
  });
</script>
</body>
</html>